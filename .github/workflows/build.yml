name: build
on: [push]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Install dependencies
        uses: amitie10g/install-package@v1.2.5
        with:
          apt: build-essential nasm gcc-multilib g++-multilib cmake xorriso dosfstools mtools unzip wget grub-pc-bin grub-efi-ia32-bin

      - name: Build towboot image
        run: HHUOS_REDISTRIBUTABLE_BUILD=1 ./build.sh --target towboot --type Default

      - name: Build limine image
        run: HHUOS_REDISTRIBUTABLE_BUILD=1 ./build.sh --target limine --type Default

      - name: Build grub image
        run: HHUOS_REDISTRIBUTABLE_BUILD=1 ./build.sh --target grub --type Default

      - name: Download Limine license
        run: wget -O limine-license.txt https://raw.githubusercontent.com/limine-bootloader/limine/trunk/COPYING

      - name: Create artifact
        run: mkdir -p hhuOS-${{ steps.commit.outputs.short }} && cp hhuOS-limine.iso hhuOS-towboot.img hdd0.img floppy0.img run.sh limine-license.txt README.md hhuOS-${{ steps.commit.outputs.short }} && cp LICENSE hhuOS-${{ steps.commit.outputs.short }}/hhuOS-license.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hhuOS-${{ steps.commit.outputs.short }}
          path: hhuOS-${{ steps.commit.outputs.short }}

      - name: Create nightly
        if: github.ref_name == 'master' || github.ref_name == 'development'
        run: tar -czvf hhuOS-${{ github.ref_name }}.tar.gz hhuOS-limine.iso hhuOS-towboot.img hdd0.img floppy0.img run.sh limine-license.txt README.md

      - name: Release nightly
        if: github.ref_name == 'master' || github.ref_name == 'development'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          name: nightly-${{ github.ref_name }}
          tag_name: nightly-${{ github.ref_name }}
          files: hhuOS-${{ github.ref_name }}.tar.gz
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_TOKEN }}